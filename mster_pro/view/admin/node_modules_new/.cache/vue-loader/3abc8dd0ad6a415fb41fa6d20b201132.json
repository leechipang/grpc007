{"remainingRequest":"D:\\phpstudy_pro\\WWW\\master\\view\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\phpstudy_pro\\WWW\\master\\view\\admin\\src\\views\\app\\wechat\\reply\\follow\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\phpstudy_pro\\WWW\\master\\view\\admin\\src\\views\\app\\wechat\\reply\\follow\\index.vue","mtime":1612255397000},{"path":"D:\\phpstudy_pro\\WWW\\master\\view\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\phpstudy_pro\\WWW\\master\\view\\admin\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\phpstudy_pro\\WWW\\master\\view\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\phpstudy_pro\\WWW\\master\\view\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getToken } from \"@/utils/auth\";\nimport {\n  replyAddApi,\n  replyEditApi,\n  keywordsinfoApi,\n  replySaveApi\n} from \"@/api/app\";\nimport { roterPre } from \"@/settings\";\nimport SettingMer from \"@/libs/settingMer\";\nimport newsCategory from \"@/components/newsCategory/index.vue\";\nexport default {\n  name: \"Index\",\n  components: { newsCategory },\n  data() {\n    const validateContent = (rule, value, callback) => {\n      if (this.formValidate.type === \"text\") {\n        if (this.formValidate.data.content === \"\") {\n          callback(new Error(\"请填写规则内容\"));\n        } else {\n          callback();\n        }\n      }\n    };\n    const validateSrc = (rule, value, callback) => {\n      if (\n        this.formValidate.type === \"image\" &&\n        this.formValidate.data.src === \"\"\n      ) {\n        callback(new Error(\"请上传\"));\n      } else {\n        callback();\n      }\n    };\n    const validateVal = (rule, value, callback) => {\n      if (this.labelarr.length === 0) {\n        callback(new Error(\"请输入后回车\"));\n      } else {\n        callback();\n      }\n    };\n    return {\n      loading: false,\n      visible: false,\n      roterPre: roterPre,\n      grid: {\n        xl: 7,\n        lg: 12,\n        md: 10,\n        sm: 24,\n        xs: 24\n      },\n      delfromData: {},\n      isShow: false,\n      maxCols: 3,\n      scrollerHeight: \"600\",\n      contentTop: \"130\",\n      contentWidth: \"98%\",\n      modals: false,\n      val: \"\",\n      formatImg: [\"jpg\", \"jpeg\", \"png\", \"bmp\", \"gif\"],\n      formatVoice: [\"mp3\", \"wma\", \"wav\", \"amr\"],\n      header: {},\n      formValidate: {\n        status: 1,\n        type: \"\",\n        key: this.$route.params.key || \"\",\n        data: {\n          content: \"\",\n          src: \"\",\n          list: []\n        }\n      },\n      ruleValidate: {\n        val: [{ required: true, validator: validateVal, trigger: \"blur\" }],\n        type: [\n          { required: true, message: \"请选择消息类型\", trigger: \"change\" }\n        ],\n        content: [\n          { required: true, validator: validateContent, trigger: \"blur\" }\n        ],\n        src: [{ required: true, validator: validateSrc, trigger: \"change\" }]\n      },\n      labelarr: [],\n      myHeaders: { \"X-Token\": getToken() }\n    };\n  },\n  computed: {\n    fileUrl() {\n      return SettingMer.https + `/wechat/reply/upload/image`;\n    },\n    voiceUrl() {\n      return SettingMer.https + `/wechat/reply/upload/voice`;\n    },\n    httpsURL() {\n      return SettingMer.httpUrl;\n    }\n  },\n  watch: {\n    $route(to, from) {\n      if (this.$route.params.key) {\n        this.formValidate.key = this.$route.params.key;\n        this.details();\n      } else {\n        this.labelarr = [];\n        this.$refs[\"formValidate\"].resetFields();\n      }\n    }\n  },\n  mounted() {\n    if (this.$route.params.key || this.$route.params.id) {\n      this.details();\n    }\n  },\n  methods: {\n    getCentList(val) {\n      this.formValidate.data.list = val.article;\n      this.visible = false;\n    },\n    changePic() {\n      this.visible = true;\n    },\n    handleClosePic() {\n      this.visible = false;\n    },\n    // 详情\n    details() {\n      keywordsinfoApi(\n        this.$route.path.indexOf(\"keyword\") !== -1\n          ? this.$route.params.id\n          : this.$route.params.key,\n        this.$route.path.indexOf(\"keyword\") !== -1 ? \"\" : 1\n      )\n        .then(async res => {\n          const info = res.data || null;\n          this.formValidate = {\n            status: info.status,\n            type: info.type,\n            key: info.key,\n            data: {\n              content: info.data.content,\n              src: info.data.src,\n              list: info.data.list\n            },\n            id: info.id\n          };\n          if (this.$route.params.id) {\n            this.labelarr = this.formValidate.key.split(\",\") || [];\n          }\n        })\n        .catch(res => {\n          if (res.message === \"数据不存在\") return;\n          this.$message.error(res.message);\n        });\n    },\n    // 上传成功\n    handleSuccess(response) {\n      if (response.status === 200) {\n        this.formValidate.data.src = response.data.src;\n        this.$message.success(\"上传成功\");\n      } else {\n        this.$message.error(response.message);\n      }\n    },\n    // 下拉选择\n    RuleFactor(type) {\n      switch (type) {\n        case \"text\":\n          this.formValidate.data.src = \"\";\n          this.formValidate.data.list = [];\n          break;\n        case \"news\":\n          this.formValidate.data.src = \"\";\n          this.formValidate.data.content = \"\";\n          break;\n        default:\n          this.formValidate.data.list = [];\n          this.formValidate.data.content = \"\";\n          this.formValidate.data.src = \"\";\n      }\n      // this.$refs['formValidate'].resetFields();\n    },\n    handleClose(tag) {\n      const index = this.labelarr.indexOf(tag);\n      this.labelarr.splice(index, 1);\n    },\n    addlabel() {\n      const count = this.labelarr.indexOf(this.val);\n      if (count === -1) {\n        this.labelarr.push(this.val);\n      }\n      this.val = \"\";\n    },\n    // 保存\n    submenus(name) {\n      this.$refs[name].validate(valid => {\n        if (valid) {\n          this.loading = true;\n          this.formValidate.key = this.labelarr.join(\",\");\n          if (this.$route.path.indexOf(\"keyword\") !== -1) {\n            this.$route.params.id\n              ? replyEditApi(this.$route.params.id, this.formValidate)\n                  .then(async res => {\n                    this.loading = false;\n                    this.$message.success(res.message);\n                    this.$router.push({\n                      path: this.roterPre + \"/app/wechat/reply/keyword\"\n                    });\n                    //   this.operation()\n                  })\n                  .catch(res => {\n                    this.loading = false;\n                    this.$message.error(res.message);\n                  })\n              : replyAddApi(this.formValidate)\n                  .then(async res => {\n                    this.loading = false;\n                    this.operation();\n                  })\n                  .catch(res => {\n                    this.loading = false;\n                    this.$message.error(res.message);\n                  });\n          } else {\n            replySaveApi(this.$route.params.key, this.formValidate)\n              .then(async res => {\n                this.loading = false;\n                this.$message.success(res.message);\n              })\n              .catch(res => {\n                this.loading = false;\n                this.$message.error(res.message);\n              });\n          }\n        } else {\n          return false;\n        }\n      });\n    },\n    // 保存成功操作\n    operation() {\n      this.$confirm(\"继续添加吗?\", \"提示\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      })\n        .then(() => {\n          setTimeout(() => {\n            this.labelarr = [];\n            this.val = \"\";\n            this.$refs[\"formValidate\"].resetFields();\n          }, 1000);\n        })\n        .catch(() => {\n          setTimeout(() => {\n            this.$router.push({ path: `${roterPre}/app/wechat/reply/keyword` });\n          }, 500);\n        });\n      // this.$modalSure('继续添加').then(() => {\n      //   setTimeout(() => {\n      //     this.labelarr = []\n      //     this.val = ''\n      //     this.$refs['formValidate'].resetFields()\n      //   }, 1000)\n      // }).catch(() => {\n      //   setTimeout(() => {\n      //     this.$router.push({ path: `${roterPre}/app/wechat/reply/keyword` })\n      //   }, 500)\n      // })\n    }\n  }\n};\n",null]}