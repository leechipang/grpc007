{"remainingRequest":"D:\\phpstudy_pro\\WWW\\master\\view\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\phpstudy_pro\\WWW\\master\\view\\admin\\src\\views\\promoter\\gift\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\phpstudy_pro\\WWW\\master\\view\\admin\\src\\views\\promoter\\gift\\index.vue","mtime":1609299900000},{"path":"D:\\phpstudy_pro\\WWW\\master\\view\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\phpstudy_pro\\WWW\\master\\view\\admin\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\phpstudy_pro\\WWW\\master\\view\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\phpstudy_pro\\WWW\\master\\view\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { changeApi, productLstApi, productDetailApi, categoryListApi, productUpdateApi, lstFilterApi, merSelectApi, productOffApi } from '@/api/promoter'\nimport { roterPre } from '@/settings'\nimport ueditorFrom from '@/components/ueditorFrom'\nimport infoFrom from '../../product/productExamine/info'\nconst proOptions = [ { name: '推荐礼包', value: 'is_best' }]\nexport default {\n  name: 'ProductExamine1',\n  components: { infoFrom, ueditorFrom },\n  data() {\n    return {\n      props: {\n        emitPath: false\n      },\n      ruleValidate: {},\n      dialogVisible: false,\n      checkboxGroup: [],\n      recommend: proOptions,\n      formValidate: {\n        is_hot: 0,\n        is_best: 0,\n        is_new: 0,\n        is_benefit: 0,\n        rank: 0,\n        content: '',\n        keyword: ''\n      },\n      fullscreenLoading: false,\n      isShow: false,\n      roterPre: roterPre,\n      listLoading: true,\n      tableData: {\n        data: [],\n        total: 0\n      },\n      tableFrom: {\n        page: 1,\n        limit: 20,\n        cate_id: '',\n        store_name: '',\n        type: '6',\n        mer_id: ''\n      },\n      categoryList: [],\n      merCateList: [],\n      ids: '',\n      multipleSelection: [],\n      headeNum: [],\n      merSelect: [],\n      OffId: [],\n      productId: 0\n    }\n  },\n  mounted() {\n    this.getMerSelect()\n    this.getList()\n    this.getCategorySelect()\n    this.getLstFilterApi()\n  },\n  methods: {\n    subSuccess() {\n      this.getList()\n      this.getLstFilterApi()\n    },\n    onchangeIsShow(row) {\n      changeApi(row.product_id, row.is_used).then(({ message }) => {\n        this.$message.success(message)\n        this.getList()\n      }).catch(({ message }) => {\n        this.$message.error(message)\n      })\n    },\n    getInfo(id) {\n      this.fullscreenLoading = true\n      this.checkboxGroup = [];\n      productDetailApi(id).then(res => {\n        const info = res.data\n        this.formValidate = {\n          is_hot: info.is_hot,\n          is_best: info.is_best,\n          is_new: info.is_new,\n          is_benefit: info.is_benefit,\n          rank: info.rank,\n          content: info.content,\n          store_name: info.store_name\n        }\n        if (info.is_good === 1) this.checkboxGroup.push('is_good')\n        if (info.is_benefit === 1) this.checkboxGroup.push('is_benefit')\n        if (info.is_best === 1) this.checkboxGroup.push('is_best')\n        if (info.is_new === 1) this.checkboxGroup.push('is_new')\n        this.fullscreenLoading = false\n      }).catch(res => {\n        this.$message.error(res.message)\n        this.fullscreenLoading = false\n      })\n    },\n    onEdit(id) {\n      this.productId = id\n      this.getInfo(id)\n      this.dialogVisible = true\n    },\n    // 提交\n    handleSubmit(name) {\n      this.onChangeGroup()\n      this.$refs[name].validate((valid) => {\n        if (valid) {\n          productUpdateApi(this.productId, this.formValidate).then(async res => {\n            this.fullscreenLoading = false\n            this.$message.success(res.message)\n            this.dialogVisible = false\n            this.getList()\n          }).catch(res => {\n            this.fullscreenLoading = false\n            this.$message.error(res.message)\n          })\n        } else {\n          return false\n        }\n      })\n    },\n    onChangeGroup() {\n      this.checkboxGroup.includes('is_benefit') ? this.formValidate.is_benefit = 1 : this.formValidate.is_benefit = 0\n      this.checkboxGroup.includes('is_best') ? this.formValidate.is_best = 1 : this.formValidate.is_best = 0\n      this.checkboxGroup.includes('is_new') ? this.formValidate.is_new = 1 : this.formValidate.is_new = 0\n      this.checkboxGroup.includes('is_hot') ? this.formValidate.is_hot = 1 : this.formValidate.is_hot = 0\n    },\n    handleClose() {\n      this.dialogVisible = false\n    },\n    // 批量下架\n    batchOff() {\n      if (this.multipleSelection.length === 0) return this.$message.warning('请先选择商品')\n      this.toOff(this.OffId)\n    },\n    // 下架\n    toOff(id) {\n      this.$prompt('强制下架', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        inputErrorMessage: '请输入强制下架原因',\n        inputType: 'textarea',\n        inputPlaceholder: '请输入强制下架原因',\n        inputValidator: (value) => {\n          if (!value) {\n            return '请输入强制下架原因'\n          }\n        }\n      }).then(({ value }) => {\n        productOffApi({ id: id, status: -2, refusal: value }).then(res => {\n          this.$message({\n            type: 'success',\n            message: '提交成功'\n          })\n          this.getLstFilterApi()\n          this.getList()\n        }).catch((res) => {\n          this.$message.error(res.message)\n        })\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: '取消输入'\n        })\n      })\n    },\n    // 列表表头；\n    getLstFilterApi() {\n      lstFilterApi().then(res => {\n        this.headeNum = res.data\n      }).catch(res => {\n        this.$message.error(res.message)\n      })\n    },\n    // 商户列表；\n    getMerSelect() {\n      merSelectApi().then(res => {\n        this.merSelect = res.data\n      }).catch(res => {\n        this.$message.error(res.message)\n      })\n    },\n    batch() {\n      if (this.multipleSelection.length === 0) return this.$message.warning('请先选择商品')\n      this.$refs.infoFrom.dialogVisible = true\n      this.isShow = false\n    },\n    handleSelectionChange(val) {\n      this.multipleSelection = val\n      const data = []\n      this.multipleSelection.map((item) => {\n        data.push(item.product_id)\n      })\n      this.OffId = data\n      this.ids = data.join(',')\n    },\n    toExamine(id) {\n      this.$refs.infoFrom.dialogVisible = true\n      this.isShow = true\n      this.$refs.infoFrom.getInfo(id)\n    },\n    // 商户分类；\n    getCategorySelect() {\n      categoryListApi().then(res => {\n        this.merCateList = res.data\n      }).catch(res => {\n        this.$message.error(res.message)\n      })\n    },\n    // 列表\n    getList(num) {\n      this.listLoading = true\n      this.tableFrom.page = num ? num : this.tableFrom.page;\n      productLstApi(this.tableFrom).then(res => {\n        this.tableData.data = res.data.list\n        this.tableData.total = res.data.count\n        this.listLoading = false\n      }).catch(res => {\n        this.listLoading = false\n        this.$message.error(res.message)\n      })\n    },\n    pageChange(page) {\n      this.tableFrom.page = page\n      this.getList()\n    },\n    handleSizeChange(val) {\n      this.tableFrom.limit = val\n      this.getList()\n    }\n    // 删除\n    // handleDelete(id, idx) {\n    //   this.$modalSure().then(() => {\n    //     productDeleteApi(id).then(({ message }) => {\n    //       this.$message.success(message)\n    //       this.getList()\n    //     }).catch(({ message }) => {\n    //       this.$message.error(message)\n    //     })\n    //   })\n    // },\n  }\n}\n",null]}